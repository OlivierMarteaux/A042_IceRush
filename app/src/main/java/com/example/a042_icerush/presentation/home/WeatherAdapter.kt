package com.example.a042_icerush.presentation.home

import android.view.LayoutInflater
import android.view.ViewGroup
import androidx.recyclerview.widget.DiffUtil
import androidx.recyclerview.widget.ListAdapter
import androidx.recyclerview.widget.RecyclerView
import com.example.a042_icerush.databinding.ItemWeatherBinding
import com.example.a042_icerush.domain.model.WeatherReportModel
import java.text.SimpleDateFormat
import java.util.Locale

/**
 * L'Adapter a pour r√¥le de lier les donn√©es √† la vue. Il agit comme un pont entre les donn√©es,
 * g√©n√©ralement stock√©es dans une liste, et la vue qui les affiche. L'adapter cr√©e √©galement
 * les ViewHolders n√©cessaires pour chaque √©l√©ment de donn√©es, ce qui permet un recyclage
 * efficace des vues et une meilleure performance.
 */
class WeatherAdapter(private val onItemClickListener: OnItemClickListener) :
    ListAdapter<WeatherReportModel, WeatherAdapter.WeatherViewHolder>(DiffCallback) {

    interface OnItemClickListener {
        fun onItemClick(weather: WeatherReportModel)
    }

    /**
     * Un ViewHolder repr√©sente chaque √©l√©ment individuel dans la liste.
     * Il conserve une r√©f√©rence aux vues √† l'int√©rieur de chaque √©l√©ment de la liste,
     * ce qui √©vite de rechercher ces vues √† chaque mise √† jour.
     */
    class WeatherViewHolder(
        private val binding: ItemWeatherBinding,
        private val onItemClickListener: OnItemClickListener
    ) : RecyclerView.ViewHolder(binding.root) {
        private val dateFormatter = SimpleDateFormat("dd/MM - HH:mm", Locale.getDefault())

        /**
         * bind lie les propri√©t√©s des donn√©es de pr√©visions m√©t√©orologiques aux √©l√©ments de la vue,
         * tels que la temp√©rature, les temp√©ratures maximale et minimale, ainsi que les
         * pr√©cipitations. C‚Äôest la m√©thode que vous modifierez le plus afin d‚Äôafficher
         * les donn√©es souhait√©es.
         */
        fun bind(weather: WeatherReportModel) {
            val formattedDate: String = dateFormatter.format(weather.date.time)
            binding.textViewDateTime.text = formattedDate
            binding.textViewSnowMaking.text = if (weather.isGoodForSnowMaking) "‚ùÑÔ∏è" else "üåßÔ∏è Ô∏è"
            binding.root.setOnClickListener {
                onItemClickListener.onItemClick(weather)
            }
        }
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): WeatherViewHolder {
        val itemView = ItemWeatherBinding.inflate(LayoutInflater.from(parent.context), parent, false)
        return WeatherViewHolder(itemView, onItemClickListener)
    }

    override fun onBindViewHolder(holder: WeatherViewHolder, position: Int) {
        val weather = getItem(position)
        holder.bind(weather)
    }

    /**
     * DiffCallBack aide √† d√©terminer quelles donn√©es ont chang√© entre les anciennes et les
     * nouvelles listes d'√©l√©ments. Cela aide √† optimiser l'affichage en mettant √† jour uniquement
     * les parties n√©cessaires de l'interface utilisateur lorsqu'il y a des changements.
     * Dans notre cas, nous v√©rifions seulement si la date change.
     */
    companion object DiffCallback : DiffUtil.ItemCallback<WeatherReportModel>() {
        override fun areItemsTheSame(oldItem: WeatherReportModel, newItem: WeatherReportModel): Boolean {
            return oldItem.date == newItem.date
        }
        override fun areContentsTheSame(oldItem: WeatherReportModel, newItem: WeatherReportModel): Boolean {
            return oldItem == newItem
        }
    }
}